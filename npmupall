#!/usr/bin/env node

'use strict'

const cp = require('child_process')
const path = require('path')

let pkgInfo = require(path.join(process.cwd(), 'package.json'))
let params = process.argv.slice(2)

let onlyDep = params.indexOf('--only-dep') !== -1
let onlyDev = params.indexOf('--only-dev') !== -1
let verbose = params.indexOf('--verbose') !== -1

params = params.join(' ')
  .replace('--only-dep', '')
  .replace('--only-dev', '')
  .replace('--save-dev', '')
  .replace('--verbose', '')
  .replace('--save', '')
  .split(' ')

if (onlyDep) {
  if (pkgInfo.dependencies) {
    install(pkgInfo.dependencies, '--save')
  }
} else if (onlyDev) {
  if (pkgInfo.devDependencies) {
    install(pkgInfo.devDependencies, '--save-dev')
  }
} else {
  // all
  if (pkgInfo.dependencies) {
    install(pkgInfo.dependencies, '--save')
  }

  if (pkgInfo.devDependencies) {
    install(pkgInfo.devDependencies, '--save-dev')
  }
}

function install(deps, type) {
  let pkgs = Object.keys(deps)

  let args, result

  for (let i = 0; i < pkgs.length; i++) {
    let version = deps[pkgs[i]]

    let pkg = pkgs[i] + '@latest'

    if (needSave(version)) {
      args = ['install', pkg, type].concat(params)
    } else {
      args = ['install', pkg].concat(params)
    }

    console.log('npm', args.join(' '))

    result = cp.spawnSync('npm', args)

    if (verbose) {
      if (result.status) {
        console.error(result.stderr.toString())
      } else {
        console.info(result.stdout.toString())
      }
    }
  }
}

function needSave(v) {
  // save
  // ~x.x.x, ^x.x.x, 0.0.x

  // not save
  // x, *
  if (v.indexOf('~') === 0 || v.indexOf('^') === 0 || v.indexOf('0.') === 0) {
    return true
  }

  return false
}

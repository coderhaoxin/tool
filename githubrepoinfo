#!/usr/bin/env iojs

'use strict';

var cp = require('child_process');

var host = 'https://api.github.com',
  paths = {
    branches: '/repos/coderhaoxin/:repo/branches',
    repos: '/users/coderhaoxin/repos?type=owner&sort=pushed&per_page=30',
    tags: '/repos/coderhaoxin/:repo/tags'
  };

var next = 0,
  locked = true;

var stdin = process.openStdin();
stdin.setRawMode(true);
stdin.setEncoding('utf8');

stdin.on('data', function(key) {
  if (key === 'q') {
    cue('bye');
    return process.exit(0);
  }

  if (locked) {
    // never trigger this ?
    return cue('hold on');
  }

  cue('start ...');
  parseRepos(repos);
});

/**
 * init : get repos
 */
var repos = httpGet(host + paths.repos);
parseRepos(repos);

/**
 * Http GET
 *   ** WARNING **: only GET, never PUT, DELETE ...
 */
function httpGet(url) {
  locked = true;

  var result = cp.spawnSync('curl', [url]);

  if (result.status) {
    throw new Error(result.stderr.toString());
  }

  result = result.stdout.toString();

  locked = false;

  return JSON.parse(result);
}

function parseRepos(repos) {
  var r = repos[next];

  var repo = {
    name: r.name,
    size: r.size,
    forks: r.forks_count,
    issue: r.open_issues_count,
    stars: r.stargazers_count,
    watch: r.subscribers_count,
    branch: r.default_branch,
    fullname: r.full_name,
  };

  getRepoInfo(repo);

  next += 1;
}

function getRepoInfo(repo) {
  var branches = httpGet(host + paths.branches.replace(':repo', repo.name)),
    tags = httpGet(host + paths.tags.replace(':repo', repo.name));

  repo.tags = repo.tags || [];
  for (var i = 0; i < tags.length; i++) {
    repo.tags.push(tags[i].name);
  }

  repo.branches = repo.branches || [];
  for (var j = 0; j < branches.length; j++) {
    repo.branches.push(branches[j].name);
  }

  log(repo);
}

function log(repo) {
  var o = console.log;

  o('\n\n');
  o('    name: %s, issue: %s, stars: %s, forks: %s, size: %s',
    repo.name, repo.issue, repo.stars, repo.forks, repo.size);

  o('\n  tags:');
  o.call(null, repo.tags.join('\n'));

  o('\n  branches:');
  o.call(null, repo.branches.join('\n'));
}

function cue() {
  // green, blue
  var colours = ['\x1b[32m', '\x1b[34m'];

  console.log();

  [].slice.apply(arguments).forEach(function(m) {
    console.log(colours[next % 2] + m);
  });
}

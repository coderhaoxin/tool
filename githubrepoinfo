#!/usr/bin/env node

'use strict'

const cp = require('child_process')

const host = 'https://api.github.com'
const paths = {
  branches: '/repos/coderhaoxin/:repo/branches',
  repos: '/users/coderhaoxin/repos?type=owner&sort=pushed&per_page=30',
  tags: '/repos/coderhaoxin/:repo/tags'
}

let next = 0
let locked = true

let stdin = process.openStdin()
stdin.setRawMode(true)
stdin.setEncoding('utf8')

stdin.on('data', function(key) {
  if (key === 'q') {
    cue('bye')
    return process.exit(0)
  }

  if (locked) {
    // never trigger this ?
    return cue('hold on')
  }

  cue('start ...')
  parseRepos(repos)
})

/**
 * init : get repos
 */
let repos = httpGet(host + paths.repos)
parseRepos(repos)

/**
 * Http GET
 *   ** WARNING **: only GET, never PUT, DELETE ...
 */
function httpGet(url) {
  locked = true

  let result = cp.spawnSync('curl', [url])

  if (result.status) {
    throw new Error(result.stderr.toString())
  }

  result = result.stdout.toString()

  locked = false

  return JSON.parse(result)
}

function parseRepos(reps) {
  let r = reps[next]

  let repo = {
    name: r.name,
    size: r.size,
    forks: r.forks_count,
    issue: r.open_issues_count,
    stars: r.stargazers_count,
    watch: r.subscribers_count,
    branch: r.default_branch,
    fullname: r.full_name
  }

  getRepoInfo(repo)

  next += 1
}

function getRepoInfo(repo) {
  let branches = httpGet(host + paths.branches.replace(':repo', repo.name))
  let tags = httpGet(host + paths.tags.replace(':repo', repo.name))

  repo.tags = repo.tags || []
  for (let tag of tags) {
    repo.tags.push(tag.name)
  }

  repo.branches = repo.branches || []
  for (let branch of branches) {
    repo.branches.push(branch.name)
  }

  log(repo)
}

function log(repo) {
  let o = console.log

  o('\n\n')
  o('    name: %s, issue: %s, stars: %s, forks: %s, size: %s',
    repo.name, repo.issue, repo.stars, repo.forks, repo.size)

  o('\n  tags:')
  o.call(null, repo.tags.join('\n'))

  o('\n  branches:')
  o.call(null, repo.branches.join('\n'))
}

function cue() {
  // green, blue
  let colours = ['\x1b[32m', '\x1b[34m']

  console.log()

  Array.prototype.slice.apply(arguments).forEach(function(m) {
    console.log(colours[next % 2] + m)
  })
}

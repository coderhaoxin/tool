#! /usr/bin/env elixir

usage = """
  usage:
    dk enter <id>   enter running container
    dk run <name>   start container by name
    dk rmi <type>   remove special type images
    dk rmv <type>   remove special type volumes
    dk stopall      stop all running containers
    dk rmall        remove all exited containers
    dk ps           ps with special format
"""

mz_ps = fn ps_result -> Enum.reverse(String.split(ps_result, "\n")) end

cmd_run = fn name ->
  System.cmd("docker", ["run", "-d", name])
end

cmd_rmi = fn _ ->
  {ps_result, _} = System.cmd("docker", ["images", "-f", "dangling=true", "-q"])
  [_ | list] = mz_ps.(ps_result)

  if length(list) > 0 do
    System.cmd("docker", ["rmi" | list])
  end
end

cmd_rmv = fn _ ->
  {ps_result, _} = System.cmd("docker", ["volume", "ls", "-qf", "dangling=true"])
  [_ | list] = mz_ps.(ps_result)

  if length(list) > 0 do
    System.cmd("docker", ["volume", "rm" | list])
  end
end

cmd_enter = fn id ->
  System.cmd("docker", ["exec", "-it", id, "/bin/bash", "-c", "'export TERM=xterm; exec bash'"])
end

cmd_stopall = fn ->
  {ps_result, _} = System.cmd("docker", ["ps", "--all", "-q", "-f", "status=running"])
  [_ | list] = mz_ps.(ps_result)

  if length(list) > 0 do
    System.cmd("docker", ["stop" | list])
  end
end

cmd_rmall = fn ->
  {ps_result, _} = System.cmd("docker", ["ps", "--all", "-q", "-f", "status=exited"])
  [_ | list] = mz_ps.(ps_result)

  if length(list) > 0 do
    System.cmd("docker", ["rm" | list])
  end
end

cmd_ps = fn ->
  {ps_result, _} =
    System.cmd("docker", ["ps", "--format", "'{{.ID}} - {{.Image}} - {{.Status}}'"])

  IO.inspect(ps_result)
end

case System.argv() do
  [a1, a2] when a1 == "run" ->
    cmd_run.(a2)

  [a1, a2] when a1 == "rmi" and a2 == "none" ->
    cmd_rmi.(a2)

  [a1, a2] when a1 == "rmv" and a2 == "none" ->
    cmd_rmv.(a2)

  [a1, a2] when a1 == "enter" ->
    cmd_enter.(a2)

  [a] when a == "stopall" ->
    cmd_stopall.()

  [a] when a == "rmall" ->
    cmd_rmall.()

  [a] when a == "ps" ->
    cmd_ps.()

  # default
  _ ->
    IO.puts(usage)
end
